# Test code for the postgresql_set module
# Copyright: (c) 2025, Andrew Klychkov (@Andersson007) <andrew.a.klychkov@gmail.com>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

- vars:
    task_parameters: &task_parameters
      become_user: '{{ pg_user }}'
      become: true
      register: result
    pg_parameters: &pg_parameters
      login_user: '{{ pg_user }}'
      login_db: postgres

  block:
  # TODO Cover check mode
  # TODO Check what it returns extensively
  # TODO Cover a few params

  - name: shared_preload_libraries with this value must fail
    <<: *task_parameters
    ignore_errors: true
    postgresql_alter_system:
      <<: *pg_parameters
      param: shared_preload_libraries
      value: ''

  - name: Check the result
    assert:
      that:
      - result is failed
      - result.msg is search("is not supported by the module to avoid crashe")

  - name: Set value of type string in check_mode
    <<: *task_parameters
    check_mode: true
    postgresql_alter_system:
      <<: *pg_parameters
      param: log_timezone
      value: Europe/Berlin

  - name: Check the result
    assert:
      that:
      - result is changed

  - name: Check nothing has changed
    <<: *task_parameters
    postgresql_query:
      <<: *pg_parameters
      query: "SELECT setting FROM pg_settings WHERE name = 'log_timezone'"

  - name: Check the output
    assert:
      that:
      - result.query_result[0]["setting"] != "Europe/Berlin"

  - name: Set value of type string
    <<: *task_parameters
    postgresql_alter_system:
      <<: *pg_parameters
      param: log_timezone
      value: Europe/Berlin

  - name: Check the result
    assert:
      that:
      - result is changed

  - name: Check it has changed
    <<: *task_parameters
    postgresql_query:
      <<: *pg_parameters
      query: "SELECT setting FROM pg_settings WHERE name = 'log_timezone'"

  - name: Check the output
    assert:
      that:
      - result.query_result[0]["setting"] == "Europe/Berlin"

  - name: Set same value again
    <<: *task_parameters
    postgresql_alter_system:
      <<: *pg_parameters
      param: log_timezone
      value: Europe/Berlin

  - name: Check the result
    assert:
      that:
      - result is not changed

  - name: Set shared_preload_libraries
    <<: *task_parameters
    postgresql_alter_system:
      <<: *pg_parameters
      param: shared_preload_libraries
      value: 'pg_stat_statements, pgcrypto'

  - name: Check the result
    assert:
      that:
      - result is changed

  # https://github.com/ansible-collections/community.postgresql/issues/78
  - name: Test param with comma containing values but no quotes
    <<: *task_parameters
    shell: "grep shared_preload_libraries {{ pg_auto_conf }}"
    register: result

  - assert:
      that:
      - result.stdout == "shared_preload_libraries = 'pg_stat_statements, pgcrypto'"

  - name: Reset shared_preload_libraries
    <<: *task_parameters
    postgresql_alter_system:
      <<: *pg_parameters
      param: shared_preload_libraries
      value: _RESET

  - name: Set search_path in check_mode
    <<: *task_parameters
    check_mode: true
    postgresql_alter_system:
      <<: *pg_parameters
      param: shared_preload_libraries
      value: '"$user", public, extensions'

  - name: Check the result
    assert:
      that:
      - result is changed

  - name: Check nothing has changed
    <<: *task_parameters
    postgresql_query:
      <<: *pg_parameters
      query: "SELECT setting FROM pg_settings WHERE name = 'search_path'"

  - name: Check the output
    assert:
      that:
      - result.query_result[0]["setting"] == "\"$user\", public"

  - name: Set search_path
    <<: *task_parameters
    postgresql_alter_system:
      <<: *pg_parameters
      param: shared_preload_libraries
      value: '"$user", public, extensions'

  - name: Check the result
    assert:
      that:
      - result is changed

  - name: Check nothing has changed
    <<: *task_parameters
    postgresql_query:
      <<: *pg_parameters
      query: "SELECT setting FROM pg_settings WHERE name = 'search_path'"

  - name: Check the output
    assert:
      that:
      - result.query_result[0]["setting"] == "\"$user\", public, extensions"

  - name: Set search_path again
    <<: *task_parameters
    postgresql_alter_system:
      <<: *pg_parameters
      param: shared_preload_libraries
      value: '"$user", public, extensions'

  - name: Check the result
    assert:
      that:
      - result is not changed
